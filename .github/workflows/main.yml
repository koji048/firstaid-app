name: Main CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run TypeScript check
      run: npm run typecheck
      
    - name: Run Prettier check
      run: npm run format:check
      
    - name: Run tests with coverage
      run: npm test -- --coverage --watchAll=false
      
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true
      
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif
      continue-on-error: true

  build-ios:
    name: iOS Build
    needs: [quality]
    uses: ./.github/workflows/ios.yml
    
  build-android:
    name: Android Build
    needs: [quality]
    uses: ./.github/workflows/android.yml

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-ios, build-android]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from package.json
      id: package-version
      run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Check if tag exists
      id: check-tag
      run: |
        if git rev-parse "v${{ steps.package-version.outputs.VERSION }}" >/dev/null 2>&1; then
          echo "EXISTS=true" >> $GITHUB_OUTPUT
        else
          echo "EXISTS=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release Tag
      if: steps.check-tag.outputs.EXISTS == 'false'
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a "v${{ steps.package-version.outputs.VERSION }}" -m "Release v${{ steps.package-version.outputs.VERSION }}"
        git push origin "v${{ steps.package-version.outputs.VERSION }}"
        
    - name: Download iOS artifacts
      uses: actions/download-artifact@v3
      with:
        name: ios-build-logs
        path: ./artifacts/ios/
        
    - name: Download Android artifacts
      uses: actions/download-artifact@v3
      with:
        name: app-debug
        path: ./artifacts/android/
        
    - name: Create GitHub Release
      if: steps.check-tag.outputs.EXISTS == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ steps.package-version.outputs.VERSION }}"
        name: "Release v${{ steps.package-version.outputs.VERSION }}"
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          ./artifacts/android/app-debug.apk